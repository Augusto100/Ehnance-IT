# -*- coding: utf-8 -*-
"""Project 3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lO1pAK4qmtHYVtSArCVvdAJoxw6SpYnH
"""

import pandas as pd
import seaborn as sns
import numpy as np
import matplotlib.pyplot as plt
plt.style.use("seaborn")
from scipy.stats import multivariate_normal as mvn

# Commented out IPython magic to ensure Python compatibility.
import warnings
warnings.filterwarnings('ignore')
# %config InlineBackend.figure_format = 'svg'

def boolean_df(item_lists, unique_items):
# Create empty dict
    bool_dict = {}
    
    # Loop through all the tags
    for i, item in enumerate(unique_items):
        
        # Apply boolean mask
        bool_dict[item] = item_lists.apply(lambda x: item in x)
            
    # Return the results as a dataframe
    return pd.DataFrame(bool_dict)

class MultipleLinearRegression():

  def fit(self, X,y):
    self.W=np.linalg.solve(X.T@X,X.T@y)

  def predict(self,X):
      return np.matmul(X, self.W)

class SimpleLinearReg():

  def fit(self, X,y):
    self.y=y

    self.d=np.mean(X**2)-(np.mean(X)**2)
    self.w0=(np.mean(y)*np.mean(X**2)-np.mean(X)*np.mean(X*y))/self.d
    self.w1=(np.mean(X*y)-np.mean(X)*np.mean(y))/self.d

    return [self.w0 ,  self.w1]

  def predict(self, X, show=0):
    y_hat=self.w0+self.w1*X
    if show:
      plt.figure()
      plt.scatter()
      plt.plot(X,y_hat,color="#FF0070")

    return y_hat

def R2(Y,Y_hat):
  return(1-(np.sum((Y-Y_hat)**2)/np.sum((Y-np.mean(Y))**2)))

data=pd.read_excel('/content/drive/MyDrive/Enhance it/Cesar Perez - raw_house_data.csv.xlsx')

"""## sqrt_ft"""

mean_sqrt_ft=data._convert(numeric=True)["sqrt_ft"].describe()["mean"]

#Replace NONE and datetime values
data["sqrt_ft"]=np.where(~data["sqrt_ft"].isin([x for x in data["sqrt_ft"] if isinstance(x, float)]),mean_sqrt_ft, data["sqrt_ft"] ).astype(float)

data=data.drop(["MLS", "HOA"], axis=1)

"""## NULL"""

data=data.dropna()

"""## Zipcode"""

data['zipcode'] = data['zipcode'].astype(float).astype(int).astype('string').astype("category")

y=[]
for i in data["zipcode"]:
  for j in i.split(","):
    y.append(j)
x={"zipcode":[],"Count":[]}
for i in np.unique(data.zipcode):
  x["zipcode"].append(i)
  x["Count"].append(y.count(i))

zipcode=pd.DataFrame(x).sort_values(["Count"],ascending=False)

best_zipcodes=zipcode[zipcode["Count"]>100]

data=data[data["zipcode"].isin(best_zipcodes.zipcode.values)]

plt.figure(figsize=(8,8))
sns.jointplot(x=data[(data["longitude"]<-1.109108e+07)&(data["latitude"]>3.225282e+07)].latitude.values, y=data[(data["longitude"]<-1.109108e+07) &(data["latitude"]>3.225282e+07)].longitude.values, size=10)
plt.ylabel("longitude", fontsize=12)
plt.xlabel("longitude")
plt.show()

"""## Replacing unused categories"""

data["zipcode"]=data.zipcode.cat.remove_unused_categories()

dummies_zip=pd.get_dummies(data["zipcode"], prefix="Zip")
data=data.join(dummies_zip)

data.zipcode

plt.figure()
plt.figure(figsize=(10,7))
sns.boxplot(data=data, y="sold_price", x="zipcode")
plt.hlines(y=750000, xmin=0, xmax=18, color="red", linestyle=":" )
plt.xticks(rotation=90);

"""##Year built


"""

data=data[data["year_built"]>=1893]

data.shape

##Max date
max_building_age=max(data["year_built"])
# Replace 0's by 2019
data["year_built"]=np.where(data["year_built"]==0,2019,data["year_built"])
##New feature
data["build_age"]=max_building_age-data["year_built"]

data.build_age=data.build_age.astype(int)

"""## Bedrooms

"""

data=data[data.bedrooms<18]

data["bedrooms"].describe()

sns.barplot(y="sold_price",x="bedrooms",data=data);

df_bedrooms=data["bedrooms"].value_counts()

sns.barplot(df_bedrooms.index,df_bedrooms.values );

data["bathrooms"]=data[data["bathrooms"].isin([x for x in data["bathrooms"] if isinstance(x,float)])]["bathrooms"].astype(int)

data=data[data["garage"].isin(x for x in data["garage"] if isinstance(x,float))]

"""## kitchen_features"""

y=[]
for i in data["kitchen_features"]:
  for j in i.split(","):
    y.append(j)

len(np.unique(y))

kitchen_features = {}
for i in data["kitchen_features"]:
    for j in j:
        if j not in kitchen_features:
            kitchen_features[j] = 1
        else:
            kitchen_features[j] += 1

x={"kitchen_feature":[],"Count":[]}
for i in np.unique(y):
  x["kitchen_feature"].append(i)
  x["Count"].append(y.count(i))

kitchen_feature=pd.DataFrame(x).sort_values(["Count"],ascending=False)

kitchen_feature.head(12)

sns.barplot(x="kitchen_feature",y="Count", data=kitchen_feature[kitchen_feature["Count"]>100])
plt.xticks(rotation=90);

"""* We just look for the values that at least appear `500` times(10% total data)
* We get `12`values
"""

sns.barplot(x="kitchen_feature",y="Count", data=kitchen_feature[kitchen_feature["Count"]>500])
plt.xticks(rotation=90);

"""* Best 200 kitchen features"""

best_kitchen_features=kitchen_feature[kitchen_feature["Count"]>200]

best_kitchen_features

dummie=pd.DataFrame()
dummie["dummie"]=data["kitchen_features"].str.split(',')

dummies_kitchen=boolean_df(data["kitchen_features"], best_kitchen_features.kitchen_feature.unique()).applymap(int)

dummies_kitchen.applymap(int)

data=data.join(dummies_kitchen)

data["Dishwasher2"]=np.where((data["Dishwasher"]==1) | (data[" Dishwasher"]==1),1,0)

data["Dishwasher"]=data["Dishwasher2"]

data=data.drop([" Dishwasher", "Dishwasher2"],axis=1)

data[["kitchen_features"," Garbage Disposal"," Refrigerator","Dishwasher"," Oven"," Gas Range"]]

x=data[["sold_price"," Garbage Disposal"," Refrigerator","Dishwasher"," Oven"," Gas Range"]]

for i in x.columns[1:]:
  sns.boxplot(data=x, y="sold_price", x=i)
  plt.show()

sns.regplot(data=data[data["Dishwasher"]==0], y="sold_price", x="sqrt_ft");
sns.regplot(data=data[data["Dishwasher"]==1], y="sold_price", x="sqrt_ft");
plt.legend(["No Dishwasher", "Dishwasher"]);

for i in [' Garbage Disposal',' Refrigerator','Dishwasher', ' Oven', ' Microwave', ' Appliance Color: Stainless',
       ' Gas Range', ' Island', ' Double Sink', ' Countertops: Granite',
        ' Pantry: Walk-In','Compactor', ' Pantry: Closet',
       ' Freezer', ' Electric Range', ' Lazy Susan', ' Prep Sink',
       ' Pantry: Cabinet', 'Desk']:
      plt.figure()

      sns.regplot(data=data[data[i]==0], y="sold_price", x="sqrt_ft")
      sns.regplot(data=data[data[i]==1], y="sold_price", x="sqrt_ft")
      plt.legend(["No"+i, i])

      plt.show()
      plt.close()

data=data.drop("kitchen_features", axis=1)



data=data.drop([' Appliance Color: Stainless',' Gas Range', ' Island', ' Double Sink',
       ' Countertops: Granite', ' Pantry: Walk-In', 'Compactor',
       ' Pantry: Closet',' Lazy Susan',
       ' Prep Sink', ' Pantry: Cabinet', 'Desk'], axis=1)

data=data.drop(" Oven", axis=1)

data["Refrigerator"]=data[" Refrigerator"]

data=data.drop(" Refrigerator", axis=1)

d1=data[["Dishwasher","Refrigerator", "sold_price"]]

s1.fit(d1.sold_price, d1.Dishwasher)

np.array(s1.fit(d1.sold_price, d1.Dishwasher)).round(4)

"""## Floor covering"""

y=[]
for i in data["floor_covering"]:
  for j in i.split(","):
    y.append(j)

floor_covering = {}
for i in data["floor_covering"]:
    for j in j:
        if j not in floor_covering:
            floor_covering[j] = 1
        else:
            floor_covering[j] += 1

x={"floor_covering":[],"Count":[]}
for i in np.unique(y):
  x["floor_covering"].append(i)
  x["Count"].append(y.count(i))

floor_covering=pd.DataFrame(x).sort_values(["Count"],ascending=False)

floor_covering

sns.barplot(x="floor_covering",y="Count", data=floor_covering[floor_covering["Count"]>10])
plt.xticks(rotation=90);

sns.barplot(x="floor_covering",y="Count", data=floor_covering[floor_covering["Count"]>250])
plt.xticks(rotation=90);

best_floor_covering=floor_covering[floor_covering["Count"]>140]

dummie=pd.DataFrame()
dummie["dummie"]=data["floor_covering"].str.split(',')

dummies_floor_covering=boolean_df(data["floor_covering"], best_floor_covering.floor_covering.unique()).applymap(int)

dummies_floor_covering.applymap(int)

data=data.join(dummies_floor_covering)

data=data.drop(" Other", axis=1)

data["Concrete2"]=np.where((data[" Concrete"]==1) | (data["Concrete"]==1),1,0)
data["Concrete"]=data["Concrete2"]
data=data.drop([" Concrete", "Concrete2"], axis=1)

data["Ceramic Tile2"]=np.where((data[" Ceramic Tile"]==1) | (data["Ceramic Tile"]==1),1,0)
data["Ceramic_Tile"]=data["Ceramic Tile2"]
data=data.drop([" Ceramic Tile","Ceramic Tile2", "Ceramic Tile"], axis=1)

data["Natural Stone2"]=np.where((data[" Natural Stone"]==1) | (data["Natural Stone"]==1),1,0)
data["Natural_Stone"]=data["Natural Stone2"]
data=data.drop(["Natural Stone2"," Natural Stone", "Natural Stone"], axis=1)

data["Wood"]=data[" Wood"]
data=data.drop(" Wood", axis=1)

data.columns

#data["Mexican Tile2"]=np.where((data[" Mexican Tile"]==1) | (data["Mexican Tile"]==1),1,0)
data["Mexican_Tile"]=data[" Mexican Tile"]
#data=data.drop([" Mexican Tile","Mexican Tile2", "Mexican Tile"], axis=1)
data=data.drop(" Mexican Tile", axis=1)

data_floor_covering=data[["sold_price","Ceramic_Tile","Natural_Stone","Mexican_Tile"]]

for i in data_floor_covering.columns[1:]:
  sns.boxplot(data=data_floor_covering, y="sold_price", x=i)
  plt.show()

for i in [ 'Ceramic_Tile', 'Concrete', 'Natural_Stone', 'Mexican_Tile',
       'Wood']:
      plt.figure()

      sns.regplot(data=data[data[i]==0], y="sold_price", x="sqrt_ft")
      sns.regplot(data=data[data[i]==1], y="sold_price", x="sqrt_ft")
      plt.legend(["No"+i, i])

      plt.show()
      plt.close()

"""### Importatn features
* Mexican tile 
* Natural Stone
* Ceramic tile
"""

data=data.drop(["Carpet","Concrete", "Wood"], axis=1)

data=data.drop("floor_covering", axis=1)

pd.set_option("max_rows", 200)

"""## Garage"""

sns.boxplot(y="garage", data=data);

data.garage=data.garage.astype(int)

data.shape

data=data[(data.garage<6) ]

data=data[data.garage!=1]

data.shape

sns.boxplot(y="sold_price",x="garage", data=data);

"""## Taxes"""

mean_taxes=data._convert(numeric=True)["taxes"].describe()["mean"]

mean_taxes

data["taxes"]=np.where(~data["taxes"].isin([x for x in data["taxes"] if isinstance(x, float)]),mean_taxes, data["taxes"] ).astype(float)

data=data[data.taxes<25000]

data=data.drop("zipcode", axis=1)

"""### Models"""

lm=MultipleLinearRegression()

data.columns

data["Garbage_Disposal"]=data[" Garbage Disposal"]
#data["Refrigerator"]=data[" Refrigerator"]
data["Microwave"]=data[" Microwave"]
data["Freezer"]=data[" Freezer"]
data["Electric_Range"]=data[" Electric Range"]
#data["Wet_Bar"]=data[" Wet Bar"]

data=data.drop("lot_acres", axis=1)

data=data.drop([" Garbage Disposal", " Microwave"," Freezer", " Electric Range" ] ,axis=1)

data.columns

X_train=data[[ 'taxes', 'year_built',
       'bedrooms', 'bathrooms', 'sqrt_ft', 'garage', 'fireplaces',  'build_age',
       'Dishwasher', 'Refrigerator', 'Ceramic_Tile', 'Natural_Stone',
       'Mexican_Tile',  'Freezer',
       ]]
y_train=data["sold_price"]

lm.fit(X_train, y_train)

y_hat=lm.predict(X_train)



data2=data
columns=data.columns
target=data2["sold_price"]
data2=data2.drop("sold_price", axis=1)
r2=[]
x=[]
for i in data2.columns:
    
    x.append(i)
    multiple=MultipleLinearRegression()
    multiple.fit(data2[x], target)
    y_hat=multiple.predict(data2[x])
    r2.append([i,R2(target, y_hat)])

r2=pd.DataFrame(r2)
r2.columns=['Feature', 'R2']

r2[4:]